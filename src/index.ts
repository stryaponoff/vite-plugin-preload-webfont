import type { GeneratedWebfont, PublicApi } from 'vite-svg-2-webfont'
import type { GeneratedFontTypes } from '@vusion/webfonts-generator'
import type { Plugin, HtmlTagDescriptor, IndexHtmlTransformContext } from 'vite'

type PluginOptions = {
  preloadFormats: GeneratedFontTypes[]
  shouldProcessHtml?: (context: IndexHtmlTransformContext) => boolean
}

export const vitePluginPreloadWebfont = (options: PluginOptions): Plugin => {
  const parentName = 'vite-svg-2-webfont' as const
  let parentPlugins: Plugin<PublicApi>[] = []
  return {
    name: 'vite-plugin-preload-webfont',
    configResolved(resolvedConfig) {
      const allPlugins = resolvedConfig.getSortedPlugins('name')
      if (Array.isArray(allPlugins)) {
        parentPlugins = allPlugins.filter((plugin) => plugin.name === parentName) as Plugin<PublicApi>[]
      }
      if (parentPlugins.length === 0) {
        console.warn(
          `[tm-vite-plugin-preload-webfont] No "${parentName}" plugin was found in plugin list. Webfonts generated by this plugin won't be preloaded.`,
        )
      }
    },
    transformIndexHtml: {
      order: 'post',
      handler(_, context) {
        if (options.shouldProcessHtml && !options.shouldProcessHtml(context)) {
          return
        }
        const assets: GeneratedWebfont[] = []
        parentPlugins.forEach((plugin) => {
          plugin.api?.getGeneratedWebfonts().forEach((webfont) => {
            assets.push(webfont)
          })
        })

        return assets
          .filter((asset) => options.preloadFormats.includes(asset.type))
          .map<HtmlTagDescriptor>((asset) => {
            return {
              tag: 'link',
              attrs: {
                rel: 'preload',
                crossorigin: true,
                type: `font/${asset.type}`,
                href: asset.href,
                as: 'font',
              },
              injectTo: 'head',
            }
          })
      },
    },
  }
}
